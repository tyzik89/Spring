Spring вызывает в конфигурационных классах методы с аннотацией @Bean.
Объекты, возвращённые этими методами, регистрируются как Spring бины.
Названия бинов соответствуют названиям методов, которые их порождают.

Вызов методов, создающих бины, вручную, вполне безопасен, потому что Spring изменяет код создания бина,
чтобы пытаться вернуть уже существующий подходящий бин и только если это невозможно, вызывать создающий код.
Поэтому в методе coin()  не создаётся второй экземпляр бина random, а используется ранее созданый бин.
По этой причине методы, имеющие аннотацию @Bean, не должны объявляться final.

Важно и название класса конфигурации:
несмотря на искушение назвать конфигурационный класс Context, делать этого не следует.
Дело в том, что Spring создаст бин и из этого класса, а в качестве имени использует имя класса.
А имя «Context» уже занято самим Spring.

Java конфигурация выглядит наилучшим образом, если сравнивать её достоинства и недостатки.
Это и централизованность как в xml;
и безопасность типов;
и простой рефакторинг;
и отсутствия spring специфичных вещей в коде;
и возможность выполнения каких-либо действий на этапе конфигурации.

К недостаткам, пожалуй, относится необходимость ручного создания бинов и необходимость пересборки для переконфигурации приложения.