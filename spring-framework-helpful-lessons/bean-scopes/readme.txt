Spring beans scopes указывают Sping, как ему управлять жизненным циклом бина.
Из коробки Spring поддерживает два базовых scope: Singleton и Prototype. По умолчанию каждый бин имеет scope Singleton, если не указано обратное.

Отличие этих двух scope в том, что Singleton bean создаётся в единственном экземпляре на весь контекст
и ссылка на этот экземпляр подсовывается каждому другому бину, который просит эту зависимость.

А вот Prototype bean напротив, создаётся отдельный для каждого другого бина, который просит его в зависимость.
========================================================================================================================
Внутреннее состояние SingletonBean общее и для FirstConsumer и для SecondConsumer,
а вот внутреннее состояние PrototypeBean и первый и второй бины-потребители видят разные.
То есть подтверждается, что SingletonBean создан в единственном экземпляре, а PrototypeBean в двух экземплярах.

В этом месте многие руководства начинают рекомендовать использовать бины с scope singleton для stateless бинов,
а бины со scope prototype для stateful бинов.
С одной стороны, они конечно правы,так как Spring гарантирует, что данные scope prototype бинов не будут разделены между разными бинами,
вызывая конфликты при обращении.
С другой стороны, scope prototype не гарантирует потокобезопасности и не гарантирует,
что один и тот же экземпляр бина со scope prototype будет вызван не более чем в одном потоке, со всеми вытекающими последствями.

Аннотация @Scope  задаёт scope бину. Эта же аннотация, только приложенная к методу, задаёт scope бину при использовании с:

1. Java config

/**
 * Spring context configuration descriptor.
 */
public class ContextConfiguration {
    /**
     * Prototype bean
     * @return Prototype bean instance
     */
    @Bean
    @Scope("prototype")
    public StatefulBean prototypeBean() {
        return new PrototypeBean();
    }
}

2. С xml тоже всё просто: в описание бина добавляется ещё один параметр:

<bean id="prototypeBean" scope="prototype" class="com.work.vladimirs.SingletonBean"/>

3. Аналогично и с groovy configuration:

beans {
    prototypeBean(PrototypeBean){bean->
        bean.scope = 'prototype'
    }
}

========================================================================================================================
Дополнительные scopes
Кроме двух базовых scopes, о которых речь шла выше, Spring предоставляет ещё три scope, которые доступны только при использовании web специфичных ApplicationContext:

request — бин создаётся для каждого HTTP request и уничтожается после завершения обработки.
session — бин создаётся для HTTP сессии и уничтожается, после её завершения.
globalSession — редкий зверь, используемый с портлетами. Бин создаётся на время существования глобальной сессии всего приложения с портлетами.