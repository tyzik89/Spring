spring.thymeleaf.cache=false


# Temporary data storage
# spring.datasource.url=jdbc:h2:file:C:/data/sample
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


# Enabling H2 Console  http://localhost:8080/h2-console
spring.h2.console.enabled=true
# In the snippets above, we set the console path to be /h2-console, which is relative to the address and port of our running application.
# Therefore, if our app is running at http://localhost:9001, # the console will be available at http://localhost:9001/h2-console.
#spring.h2.console.path=/h2-console
# Furthermore, we set spring.h2.console.settings.trace to false to prevent trace output,
# and we can also disable remote access by setting spring.h2.console.settings.web-allow-others to false.
#spring.h2.console.settings.trace=false
#spring.h2.console.settings.web-allow-others=false

# Custom H2 Console URL
#spring.h2.console.path=/h2

#logging.file.path=/
#logging.file.name=RocketCloud.log
#logging.level.root=WARN
#logging.level.org.springframework.security=DEBUG

########################################################################################################################

# The list of option which is used in the spring boot are
# - validate: validate the schema, makes no changes to the database.
# - update: update the schema.
# - create: creates the schema, destroying previous data.
# - create-drop: drop the schema at the end of the session
# - none: is all other cases.
spring.jpa.hibernate.ddl-auto=create-drop


# Initialize the datasource with available DDL and DML scripts.
# - always
# - never: Don't user custom schema.sql and data.sql
# - embedded
# In a JPA-based app, you can choose to let Hibernate create the schema or use schema.sql,
# but you cannot do both. Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql.
spring.datasource.initialization-mode=never


# Define initialization scripts to run when the application starts
#spring.datasource.schema=
#spring.datasource.data=classpath:data.sql
#spring.jpa.properties.hibernate.hbm2ddl.import_files=script1.sql, script2.sql

# The configuration for initial data and Spring JDBC support is very similar to Hibernate.
# We have to use the spring.sql.init.data-locations property:
#spring.sql.init.data-locations=import_active_users.sql,import_inactive_users.sql

########################################################################################################################

# Enable logging of SQL statements.
spring.jpa.show-sql=false
# Spring Data JPA with Hibernate. To beautify or pretty print the SQL
spring.jpa.properties.hibernate.format_sql=false


#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

########################################################################################################################

# Configure data source in JNDI and have Spring look it up from there
#spring.datasource.jndi-name=java:/comp/env/jdbc/MyDS

rocket.orders.pageSize=3